#!/bin/sh

##############################################################################
# FUNCTIONS
##############################################################################

# Function to help the user
usage() {
	echo -e "\r\tThis script deploy the IOT Project"

	echo -e "\tOPTIONS:"
	echo -e "\t--help	Help"
	echo -e "\t--env	Environnement: Dev or Prod	<dev/hom/prd>		Ex: --env dev"
	echo -e "\t--mode   Mode: Deploy ou Undeploy <deploy/undeploy>          Ex: --mode deploy"
	exit 0;
}
#hdfs dfs -mkdir /project/bddf/iot/apps/oozie/bundle
# Function to define variables in function of parameters
defineVariable() {

	# Commun
	# Commun
	logDate=$(date +"%Y%m%d_%H%M%S")
	reportFile="bddf_iot_project_deploy_${logDate}.log"
	error=0
	lastCmd=""
	appPath="${MAVEN_APP_DIR}"
	appTmpPath="${MAVEN_TMP_DIR}"
	dirToDelete="oozie"


	if [[ ${env} == 'dev' ]]; then
		logPath=~/log
		execute "echo ${MAVEN_OOZIE_SERVER_AND_PORT}"
		oozieUrl="http://${MAVEN_OOZIE_SERVER_AND_PORT}/oozie -doas ${MAVEN_HADOOP_USER_NAME}"
	elif [[ ${env} == 'dev2' ]]; then
        logPath="/applis/hadd/gcdl/iot/log"
        oozieUrl="http://${MAVEN_OOZIE_SERVER_AND_PORT}/oozie"
        kerberosPrincipal="${MAVEN_HADOOP_USER_NAME}@DDHAD"
        kerberosKeytab="/etc/security/keytabs/${MAVEN_HADOOP_USER_NAME}.DDHAD.applicatif.keytab"
	elif [[ ${env} == 'hom' ]]; then
		logPath="/applis/hadd/share/iot/logs"
		oozieUrl="http://${MAVEN_OOZIE_SERVER_AND_PORT}/oozie"
		kerberosPrincipal="${MAVEN_HADOOP_USER_NAME}/$(hostname -f)@DIHAD"
		kerberosKeytab="/applis/hadd/.keytabs/${MAVEN_HADOOP_USER_NAME}.applicatif.keytab"
	elif [[ ${env} == 'prd' ]]; then
		logPath="${APP_DIR}/logs/iot"
		oozieUrl="$OOZIE_URL"
		kerberosPrincipal="${MAVEN_HADOOP_USER_NAME}/$(hostname -f)@PHAD"
		kerberosKeytab="${APP_DIR}/.keytabs/${MAVEN_HADOOP_USER_NAME}.applicatif.keytab"
	else
		usage
	fi
}

# Function to initialize kerberos ticket
initializeKerberosTicket() {
	# Int and Prd
	if [[ ${env} == 'hom' ]] || [[ ${env} == 'prd' ]] || [[ ${env} == 'dev2' ]]; then
		log "Logging to Kerberos as ${kerberosPrincipal} using ${kerberosKeytab}"
		execute "kinit -k ${kerberosPrincipal} -t ${kerberosKeytab}"
		check
	fi
}

# Function to log messages
log() {
	echo -e "$(date +"%d/%m/%Y %H:%M:%S") [INFO] $1" | tee -a ${logPath}/${reportFile}
	lastCmd="$1"
}

# Function to execute  actions and log them
execute () {
	echo -e "$(date +"%d/%m/%Y %H:%M:%S") [EXEC] $1" | tee -a ${logPath}/${reportFile}
	$1 1>> ${logPath}/${reportFile} 2>&1
}

# Function to check last action success
check() {
	if (( $? != 0 )); then
		echo -e "$(date +"%d/%m/%Y %H:%M:%S") [ERROR] $lastCmd [KO]" | tee -a ${logPath}/${reportFile}
		let error=error+1
	fi
}

# Function to get parameters on launch
getArguments() {
	OPTS=$(getopt -o o --long mode:,env:, -- "$@")
	if [ $? != 0 ]; then usage; fi;

	eval set -- "$OPTS"

	while true ; do
	    case "$1" in
		--help) usage; echo u; shift 2;;
		--mode) mode=${2}; shift 2;;
		--env)  env=${2}; shift 2;;
		--) shift; break;;
	    esac
	done
}

# Function to create a Hdfs directory
deleteDir() {
	execute "hdfs dfs -rm -r $1"
}

# Function to welcome the user
hello() {
	log  "You are running the script $0."
}

# Function to trap exit signal
end(){
	log "${error} errors have been detected during the execution."
	log "For more information, please consult: ${logPath}/${reportFile}"
}

##############################################################################
# INITIALIZATION
##############################################################################

getArguments "$@"
defineVariable
initializeKerberosTicket

trap end EXIT

##############################################################################
# DEPLOY
##############################################################################
if [[ ${mode} == "deploy" ]]; then
    # Welcome message
    hello

    # Be sure $logPath exists or create it
    mkdir -p ${logPath}

    # Upload Coordinator Resources
    log "Uploading Coordinator Resources"
    execute "hdfs dfs -mkdir -p ${appPath}"
    execute "hdfs dfs -mkdir -p ${appTmpPath}"
    execute "hdfs dfs -put -f $(dirname $0)/apps/* ${appPath}"
    check

    # Trigger Oozie Coordinator
    log "Triggering Oozie Bundle"
    execute "oozie job -config $(dirname $0)/apps/oozie/bundle/bundle.properties -run -oozie ${oozieUrl}"
    check

##############################################################################
# UNDEPLOY
##############################################################################
elif [[ ${mode} == "undeploy" ]]; then
	# Welcome message
	hello

	# Delete old directories
	log "Kill oozie job if running"
	appid=$(oozie jobs -filter name="${MAVEN_BUNDLE_NAME}"  -oozie ${oozieUrl} -jobtype bundle | grep "RUNNING" | awk -F " " '{print $1}')
	execute "oozie job -kill $appid -oozie ${oozieUrl}"

	log "Deleting old directories"
	check
	for dir in ${dirToDelete}; do
		log "Deleting ${appPath}/${dir}"
		deleteDir "${appPath}/${dir}"
		check
	done

##############################################################################
# ELSE
##############################################################################
else echo "Bad Mode. Cannot launch script."; let error=error+1; usage; fi

exit ${error}
